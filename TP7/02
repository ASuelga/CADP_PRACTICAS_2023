//2. Implementar un programa que lea y almacene información de clientes de una empresa aseguradora automotriz. 
//De cada cliente se lee: código de cliente, DNI, apellido, nombre, código de póliza contratada (1..6) y monto básico que abona mensualmente. 
//La lectura finaliza cuando llega el cliente con código 1122, el cual debe procesarse.
//La empresa dispone de una tabla donde guarda un valor que representa un monto adicional que el cliente debe abonar en la liquidación mensual
//de su seguro, de acuerdo al código de póliza que tiene contratada.
//Una vez finalizada la lectura de todos los clientes, se pide:

//a. Informar para cada cliente DNI, apellido, nombre y el monto completo que paga mensualmente por su seguro automotriz
//(monto básico + monto adicional).

//b. Informar apellido y nombre de aquellos clientes cuyo DNI contiene al menos dos dígitos 9.

//c. Realizar un módulo que reciba un código de cliente, lo busque (seguro existe) y lo elimine de la estructura.

program eje2_tp7;
type   
    str30 = string[30];
    cliente = record
        codigo: integer;
        dni: str30;
        apellido: str30;
        nombre: str30;
        poliza: str30;
        monto: real;
    end;

    lista = ^nodo;
    nodo = record
        dato: cliente;
        sig: lista;
    end;

    vector_poliza_cont= array[1..6] of real; ///se dispone

procedure leerCliente(var c: cliente);
begin
    writeln('Ingrese el codigo de cliente');
    readln(c.codigo);
    writeln('Ingrese el DNI');
    readln(c.dni);
    writeln('Ingrese el apellido');
    readln(c.apellido);
    writeln('Ingrese el nombre');
    readln(c.nombre);
    writeln('Ingrese el codigo de poliza');
    readln(c.poliza);
    writeln('Ingrese el monto');
    readln(c.monto);
end;

procedure insertarOrdenado(var l: lista; c: cliente);
var
    ant, nue, act: lista;
begin
    new(nue);
    ant:=l;
    act:=l;
    while(l<>nil)and(l^.dato.codigo<c.codigo)do begin
        ant:=act;
        act:=act^.sig;
    end;
    if(ant=act)then
        l:=nue
    else begin
        ant^.sig:=nue;
    end;
    nue^.sig:=act;  
end;

procedure eliminar(var l: lista; cod: integer);
var
    ant, act: lista;
begin
    ant:=l;
    act:=l;
    while(act^.dato.codigo<>cod)do begin
        ant:=act;
        act:=act^.sig;
    end;
    else begin
    if (act=l) then         //si es el primero
        l:=l^.sig           //l apunta al siguiente
    else
        ant^.sig:=act^.sig; //el anterior apunta al siguiente
    dispose(act);
    act:=ant;
    end;
end;

procedure monto_completo(c: cliente; vp: vector_poliza_cont; var total_completo: real);
begin
    total_completo:=c.monto+vp[c.poliza];
    writeln('El DNI es: ', c.dni);
    writeln('El apellido es: ', c.apellido);
    writeln('El nombre es: ', c.nombre);
    writeln('El monto completo es: ', monto_completo);
end;

procedure apellido_nombre(c: cliente);
var 
    dig, cant:integer;
begin
    cant:=0;
    dig:=(c.dni mod 10);
    while(c.dni<>0)do begin
        if(dig=9)then
            cant:=cnat+1;
            c.dni:=c.dni div 10;
        end
        if(cant>=2)then begin
            writeln('El apellido es: ', c.apellido);
            writeln('El nombre es: ', c.nombre);
        end;
    end;
end;


procedure recorrerLista(l: lista, vp: vector_poliza_cont);
var
    cli: cliente;
begin
    repeat
        leerCliente(cli);
        insertarOrdenado(l, cli);
        monto_completo(cli, vp,total_completo);
        apellido_nombre(cli);
    until(cli.codigo=1122);
end;

var
    l: lista;
    cod: integer;
begin
    l:=nil;
    recorrerLista(l);
    writeln('Ingrese el codigo de cliente a eliminar');
    readln(cod);
    eliminar(l, cod);
end.
