La empresa Amazon Web Services (AWS) dispone de la información de sus 500 clientes monotributistas más
grandes del país. De cada cliente conoce la fecha de firma del contrato con AWS, la categoría del
monotributo (entre la A y la F), el código de la ciudad donde se encuentran las oficinales (entre 1 y 2400) y
el monto mensual acordado en el contrato. La información se ingresa ordenada por fecha de firma de
contrato (los más antiguos primero, los más recientes últimos).
Realizar un programa que lea y almacene la información de los clientes en una estructura de tipo vector.
Una vez almacenados los datos, procesar dicha estructura para obtener:
    a. Cantidad de contratos por cada mes y cada año, y año en que se firmó la mayor cantidad de contratos
    b. Cantidad de clientes para cada categoría de monotributo
    c. Código de las 10 ciudades con mayor cantidad de clientes
d. Cantidad de clientes que superan mensualmente el monto promedio entre todos los clientes.

program eje5;
const   
    dimf=500;
    
type
    monotributo='A'..'F';
    ciudad=1..2400;
    dias=1..31;
    meses=1..12;

    fecha=record
        dia:dias;
        mes:meses;
        anio:integer;
    end;    
    cliente=record
        fechaFirma:fecha;
        categoria:monotributo;
        codigoCiudad:ciudad;
        monto:real;
    end;

vector_ciudades= array[1..dimf] of cliente; //este vector guarda la cantidad de contratos por cada ciudad
vector_categorias= array[a..f] of cliente;  //este vector guarda la cantidad de contratos por cada categoria
vector_fechas= array[dias,meses,anio] of cliente; ////este vector guarda la cantidad de contratos por cada mes y cada año

procedure leerCliente(var c:cliente);
begin
    writeln('Ingrese fecha de firma del contrato');
    readln(c.fechaFirma.dia);
    readln(c.fechaFirma.mes);
    readln(c.fechaFirma.anio);
    writeln('Ingrese categoria de monotributo');
    readln(c.categoria);
    writeln('Ingrese codigo de ciudad');
    readln(c.codigoCiudad);
    writeln('Ingrese monto');
    readln(c.monto);
end;


procedure inicializar_vector(var v:vector_fechas);
var
    i,j,k:integer;
begin
    for i:=1 to 31 do
        for j:=1 to 12 do
            for k:=1 to 2023 do
                v[i,j,k]:=0;
end;

procedura cargar_vector_ciu(var v:vector_ciudades; var diml:integer);
var
    i;integer; c:cliente;
begin
    diml:=0;                                        // guarda la cantidad de contratos por cada ciudad
    leerCliente(c);                                 //lee el primer cliente
    while (diml<dimf) do begin          
    for i:=1 to diml do                             
        if(c.codigoCiudad=v[i].codigoCiudad) then    //si el codigo de ciudad del cliente es igual al codigo de ciudad del vector
            v[i].codigoCiudad:=v[i].codigoCiudad+1;) //aumento en 1 la cantidad de contratos de esa ciudad
            diml:=diml+1;                            //aumento la dimension logica del vector
            v[diml]:=c;                              //guardo el cliente en el vector
        end;
    leerCliente(c);                                  //lee el siguiente cliente
    end;
end;

procedura cargar_vector_cat(var v:vector_categorias; var diml:integer);
var
    i;integer; c:cliente;
begin
    diml:=0;                                        // guarda la cantidad de contratos por cada categoria
    leerCliente(c);                                 //lee el primer cliente
    while (diml<dimf) do begin                      //mientras la dimension logica del vector sea menor a la dimension fisica
        for i:=1 to diml do begin
            if(c.categoria=v[i].categoria)then      //si la categoria del cliente es igual a la categoria del vector
                v[i].categoria:=v[i].categoria+1;   //aumento en 1 la cantidad de contratos de esa categoria
                diml:=diml+1;                       //aumento la dimension logica del vector
                v[diml]:=c;                         //guardo el cliente en el vector
            end;
        leerCliente(c);                              //lee el siguiente cliente
        end;
    end;
end;

procedure cargar_vector_fechas(var v:vector_fechas; var diml:integer);
var
    i,j,k:integer; c:cliente;
begin
    diml:=0;                                        // guarda la cantidad de contratos por cada mes y cada año
    leerCliente(c);                                 //lee el primer cliente
    while (diml<dimf) do begin                      //mientras la dimension logica del vector sea menor a la dimension fisica
        for i:=1 to diml do begin
            if(c.fechaFirma.dia=v[i].fechaFirma.dia)and(c.fechaFirma.mes=v[i].fechaFirma.mes)and(c.fechaFirma.anio=v[i].fechaFirma.anio)then //si la fecha del cliente es igual a la fecha del vector
                v[i].fechaFirma.dia:=v[i].fechaFirma.dia+1; //aumento en 1 la cantidad de contratos de esa fecha
                diml:=diml+1;                       //aumento la dimension logica del vector
                v[diml]:=c;                         //guardo el cliente en el vector
            end;
        leerCliente(c);                              //lee el siguiente cliente
        end;
    end;
end;

///Cantidad de contratos por cada mes y cada año, y año en que se firmó la mayor cantidad de contratos
prcedura mayor_cantidad_contratos(var v:vector_fechas; diml:integer; var dia:dias; var mes:meses; var anio:integer, cant_mes, cnt_anio:integer);
var
    i,j,k:integer; max:integer;
begin
    max:=0;
    cant_mes:=0;
    cant_anio:=0;
    for i:=1 to diml do begin  
        for j:=1 to 31 do
            for k:=1 to 12 do
               if(v[i]).fechaFirma.dia=j)and(v[i].fechaFirma.mes=k)then
                    v[i].fechaFirma.dia:=v[i].fechaFirma.dia+1;
                    if(v[i].fechaFirma.dia>max)then begin
                        max:=v[i].fechaFirma.dia;
                        dia:=v[i].fechaFirma.dia;
                        mes:=v[i].fechaFirma.mes;
                        anio:=v[i].fechaFirma.anio;
                    end;
                    cant_mes:=cant_mes+1;
                    if(v[i].fechaFirma.anio=anio)then
                        cant_anio:=cant_anio+1;
                end;
            end;
        writeln('La mayor cantidad de contratos se firmo el ',dia,'/',mes,'/',anio);
        writeln('La cantidad de contratos por mes es: ',cant_mes);
        writeln('La cantidad de contratos por año es: ',cant_anio);
end;
//Cantidad de clientes para cada categoría de monotributo
procedure cant_clientes_por_cat(var v:vector_categorias; diml:integer); 
var
    i:integer;
begin
    for i:=1 to diml do
        writeln('La cantidad de clientes para la categoria ',v[i].categoria,' es: ',v[i].categoria);
end;

///////////////////NI IDE COMO HACERLO/////////////////////
//Código de las 10 ciudades con mayor cantidad de clientes
procedure cod_max_ciudades(var v:vector_ciudades; diml:integer); 
var
    i,j:integer;
    max:integer;
begin
    max:=0;                                             //codigo de las 10 ciudades con mayor cantidad de clientes
    for i:=1 to diml do begin                           
        for j:=1 to diml do     
            if(v[i].codigoCiudad=v[j].codigoCiudad)then //si el codigo de ciudad del cliente es igual al codigo de ciudad del vector
                v[i].codigoCiudad:=v[i].codigoCiudad+1; //aumento en 1 la cantidad de contratos de esa ciudad
            if(v[i].codigoCiudad>max)then               //si el codigo de ciudad del cliente es mayor al codigo de ciudad del vector
                max:=v[i].codigoCiudad;                 //guardo el codigo de ciudad del cliente en max
        end;
    end;
    writeln('El codigo de las 10 ciudades con mayor cantidad de clientes es: ',max);    
end;

//Código de las 10 ciudades con mayor cantidad de clientes
procedure cod_max_ciudades(var v: vector_ciudades; diml: integer);
/{{}/////////////ni idea como hacerlo/////////////////////}
end;


//Cantidad de clientes que superan mensualmente el monto promedio entre todos los clientes.
procedure cant_clientes_mayor_promedio(var v:vector_ciudades; diml:integer); 
var
    i:integer;
    promedio:real;
    cant:integer;
begin
    promedio:=0;                            //monto promedio entre todos los clientes
    cant:=0;
    for i:=1 to diml do
        promedio:=promedio+v[i].monto;      //suma de todos los montos
        promedio:=promedio/diml;            //monto promedio dividido la cantidad de clientes
        for i:=1 to diml do
            if (v[i].monto>promedio)then    //si el monto del cliente es mayor al promedio
                cant:=cant+1;               //aumento en 1 la cantidad de clientes
        end;    
    end;
    writeln('La cantidad de clientes que superan mensualmente el monto promedio entre todos los clientes es: ',cant);
end;

var 
    v:vector_fechas
    diml:integer;
    dia:dias;
    mes:meses;
    anio:integer;
    cant_mes:integer;
    cant_anio:integer;
begin
    inicializar_vector(v);
    cargar_vector_ciu(v,diml);
    cargar_vector_cat(v,diml);
    cargar_vector_fechas(v,diml);
    mayor_cantidad_contratos(v,diml,dia,mes,anio,cant_mes,cant_anio);
    cant_clientes_por_cat(v,diml);
    cod_max_ciudades(v,diml);
    cant_clientes_mayor_promedio(v,diml);
end.
