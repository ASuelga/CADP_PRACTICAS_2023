Una cátedra dispone de información de sus alumnos (a lo sumo 1000). De cada alumno se conoce nro de
alumno, apellido y nombre y cantidad de asistencias a clase. Dicha información se encuentra ordenada por
nro de alumno de manera ascendente. Se pide:
a. Un módulo que retorne la posición del alumno con un nro de alumno recibido por parámetro. El
alumno seguro existe.
b. Un módulo que reciba un alumno y lo inserte en el vector.
c. Un módulo que reciba la posición de un alumno dentro del vector y lo elimine.
d. Un módulo que reciba un nro de alumno y elimine dicho alumno del vector
e. Un módulo que elimine del vector todos los alumnos con cantidad de asistencias en 0.
Nota: Realizar el programa principal que invoque los módulos desarrollados en los incisos previos con datos
leídos de teclado.

program eje4,
const
    dimf=1000;
type
    alumno=record
        numero:integer;
        apellido:string;
        nombre:string;
        cant_asist:integer;
end;
    vector_alumnos=array[1..dimf] of alumno;

procedure leer_alumno(al:alumno);   ///////se dispone
begin
    writeln('Ingrese el numero de alumno');
    readln(al.numero);
    writeln('Ingrese el apellido');
    readln(al.apellido);
    writeln('Ingrese el nombre');
    readln(al.nombre);
    writeln('Ingrese la cantidad de asistencias');
    readln(al.cant_asist);
end;

procedure inicializar_vector_dias(var v:vector_dias);
var
    i:integer;
begin
    for i:=1 to dimf do
        v[i]:=0;
end;

procedure cargar_vector(var v:vector_alumnos; var diml:integer);///// se dispone
var
    i,al:alumno;
begin
    diml:=0;
    for i:=1 to dimf do begin
        leer_alumno(al);
        diml:=diml+1;
        v[diml]:=al;
    end;
end;

procedure buscar_alumno(v:vector_alumnos; diml:integer; num:integer; var pos:integer);
var
    i:integer;
begin
    for i:=1to diml do
        if (v[i].numero=num) then
            pos:=i;
end;

Procedure insertar_alumno (var v:vector ; var dL:integer; a:alumnos)
Var
 i:integer;
begin
  if ((dL + 1) <= dimF) then begin
   for i:= dL downto 1 do
        a[i+1]:= a[i];  
   v[i]:= a;
   dL:= dL + 1;
  end;
end;

procedure eliminar_posicion(var v:vector_alumnos; var diml:integer; pos:integer);
var
    i:integer;
begin
    if(pos>=1)and(pos<diml)then begin
        for i:=pos to diml-1 do begin
            v[i]:=v[i+1];
        end;
        diml:=diml-1;
    end;
end;

procedure eliminar_alumno(var v:vector_alumnos; var diml:integer; num:integer);
var
    pos:integer;
begin
    buscar_alumno(v,diml,num,pos);
    eliminar_posicion(v,diml,pos);
end;

procedure eliminar_cero(var v:vector_alumnos; var diml:integer);
var
    i:integer;
    oc:integer;
begin
    oc:=0;
    if(va[i].cant_asist=0)then begin
        eliminar_posicion(v,diml,i);
        oc:=oc+1;
    end;
    diml:=diml-oc;
end;

var 
    v:vector_alumnos;
    diml:integer;
    num:integer;
begin   
    inicializar_vector_dias(v);
    cargar_vector(v,diml);
    writeln('Ingrese el numero de alumno a buscar');
    readln(num);
    buscar_alumno(v,diml,num,pos);
    insertar_alumno(v,diml,a);
    eliminar_posicion(v,diml,pos);
    eliminar_alumno(v,diml,num);
    eliminar_cero(v,diml);
end.
