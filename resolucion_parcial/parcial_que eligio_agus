PUEDE FALLAR 

program 15-06-2018;
type
    provincias=1..23;
    estancias=record
        codigoEstancia:integer;
        localidad:string;
        codigoProvincia:provincias;
        cantGanado:integer;
    end;

    lista=^nodo;
    nodo=record
        dato:estancias;
        sig:lista;
    end;

    vector_pro= array[provincias] of integer;

procedure inicializarVector(var vp:vector_pro);
var
    i:integer;
begin
    for i:=1 to 23 do begin
        v[i]:=0;
    end;
end;

procedure leerEstancia(var e:estancias);
begin
    writeln('Ingrese el codigo de estancia');
    readln(e.codigoEstancia);
    if(e.codigoEstancia<>0) then begin
        writeln('Ingrese la localidad');
        readln(e.localidad);
        writeln('Ingrese el codigo de provincia');
        readln(e.codigoProvincia);
        writeln('Ingrese la cantidad de ganado');
        readln(e.cantGanado);
    end;
end;

procedure inseertarlista(var l:lista; e:estancias);
var
    nue:lista;
begin
    
    new(nue);
    nue^.dato:=e;
    nue^.sig:=l;
    l:=nue;
end;

procedure cargarEstancias(var l:lista);
var
    e:estancias;
begin
    inicializarVactor(vp);
    leerEstancia(e);
    while(e.codigoEstancia<>0) do begin
        inseertarlista(l,e);
        leerEstancia(e);
    end;
end;

function buscarEstancia(l:lista):boolean;
begin
    while(l<>nil) and (act^.dato.codigoEstancia<>234) do begin
        l:=l^.sig;
    if(l^.dato.codigoEstancia=234) then 
        buscarEstancia:=true;    
    else 
        buscarEstancia:=false;
end;


procedure maximoGanado(l:lista; var cod1, cod2:integer);
var
    vp:vector_pro;
    i,max1, max2:integer;
    cantGanadoPro : vector_pro;
begin
    max1:=-1;
    max2:=-1;
    while(l<>nil) do begin
        ld:=l^.dato;
        provinciaActual:=ld.codigoProvincia;
        cantGanadoPro:=0;
        while(l<>nil) and (ld.codigoProvincia=provinciaActual) do begin
            cantGanadoPro[ld.codigoProvincia]:=cantGanadoPro[ld.codigoProvincia]+ld.cantGanado; // sumo la cantidad de ganado de la provincia
            l:=l^.sig;
        end;
        for i:= 1 to 23 do begin                    //busco el maximo y el segundo maximo
            if(cantGanadoPro[i]>max1) then begin
                max2:=max1;
                max1:=cantGanadoPro[i];
                cod2:=cod1;
                cod1:=i;
            end
            else
                if(cantGanadoPro[i]>max2) then begin
                    max2:=cantGanadoPro[i];
                    cod2:=i;
                end;
        end;
    end;
end;
////////////////////////////////no se si puede ir 
procedure recorrido(l:lista);
var
    provinciaActual:provincias;
    cantGanadoPro:integer;
begin
     while(l<>nil) do begin
        ld:=l^.dato;
        provinciaActual:=ld.codigoProvincia;
        cantGanadoPro:=0;
        while(l<>nil) and (ld.codigoProvincia=provinciaActual) do begin
            cantGanadoPro[ld.codigoProvincia]:=cantGanadoPro[ld.codigoProvincia]+ld.cantGanado; // sumo la cantidad de ganado de la provincia
            l:=l^.sig;
        end;
    end;
////////////////////////////////////////
//////////////PROGRAMA PRINCIPAL/////////////////////

var
    l:lista;
    cod1, cod2:integer;
begin
    l:=nil;
    cargarestancias(l);
    if(buscarEstancia(l)=true) then begin
        writeln('La estancia 234 se encuentra en la lista');
    end
    else
        writeln('La estancia 234 no se encuentra en la lista');
    maximoGanado(l, cod1, cod2);
    writeln('La provincias con mas ganado son: ', cod1, ' y ', cod2);
end.
